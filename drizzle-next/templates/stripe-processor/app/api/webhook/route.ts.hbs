import { config } from "@/lib/config";
import { db } from "@/lib/db";
import { payments } from "@/schema/payments";
import { products } from "@/schema/products";
import { stripeWebhooks } from "@/schema/stripe-webhooks";
import { users } from "@/schema/users";
import { eq, or } from "drizzle-orm";

const stripe = require("stripe")(config.STRIPE_SECRET_KEY);

const endpointSecret = config.STRIPE_WEBHOOK_SECRET;

export async function POST(req: Request) {
  const payload = await req.text();

  await db.insert(stripeWebhooks).values({
    payload: payload,
  });

  const sig = req.headers.get("stripe-signature");

  let event;

  try {
    event = stripe.webhooks.constructEvent(payload, sig, endpointSecret);
  } catch (err: any) {
    console.error(err);
    return Response.json(
      { err: `webhook error: ${err.message}` },
      { status: 400 }
    );
  }

  switch (event.type) {
    case "checkout.session.completed":
      await handleCheckoutSessionCompleted(event);
      break;
    case "invoice.paid":
      await handleInvoicePaid(event);
      break;
    case "invoice.payment_failed":
      await handleInvoicePaymentFailed(event);
      break;
    default:
    // unhandled event type
  }

  return Response.json({ message: "success" });
}

async function handleCheckoutSessionCompleted(event: any) {
  const email = event.data.object.customer_email;
  const stripeCustomerId = event.data.object.customer;
  const productIdFromMetadata = event.data.object.metadata.product_id;

  const user = await db.query.users.findFirst({
    where: or(
      eq(users.email, email),
      eq(users.stripeCustomerId, stripeCustomerId)
    ),
  });

  if (!user) {
    throw new Error("user not found " + email);
  }

  // save stripe customer id for subsequent checkouts
  if (!user.stripeCustomerId && stripeCustomerId) {
    await db
      .update(users)
      .set({ stripeCustomerId: stripeCustomerId })
      .where(eq(users.id, user.id));
  }

  // process dynamic-product
  if (productIdFromMetadata) {
    await db.insert(payments).values({
      amountTotal: event.data.object.amount_total,
      userId: user.id,
      productId: productIdFromMetadata,
    });

    // TODO: fulfill dynamic order
    return;
  }

  // process one-time purchase
  const sessionWithLineItems = await stripe.checkout.sessions.retrieve(
    event.data.object.id,
    {
      expand: ["line_items"],
    }
  );
  const lineItems = sessionWithLineItems.line_items;

  for (const item of lineItems.data) {
    const stripeProductId = item.price.product;
    const amountTotal = item.amount_total;

    const product = await db.query.products.findFirst({
      where: eq(products.stripeProductId, stripeProductId),
    });

    if (!product) {
      throw new Error("product not found " + stripeProductId);
    }

    if (product.stripeMode === "payment") {
      await db.insert(payments).values({
        productId: product.id,
        amountTotal: amountTotal,
        userId: user.id,
      });

      // TODO: fulfull one-time purchase
    }
  }
}

async function handleInvoicePaid(event: any) {
  const email = event.data.object.customer_email;
  const data = event.data.object.lines.data;
  const total = event.data.object.total;

  const user = await db.query.users.findFirst({
    where: eq(users.email, email),
  });

  if (!user) {
    throw new Error("user not found " + email);
  }

  // process subscription
  for (const d of data) {
    const stripeProductId = d.price.product;

    const product = await db.query.products.findFirst({
      where: eq(products.stripeProductId, stripeProductId),
    });

    if (!product) {
      console.log("product not found. likely an unmapped dynamic-product.");
      return;
    }

    if (product.stripeMode === "subscription") {
      await db.insert(payments).values({
        productId: product.id,
        amountTotal: total,
        userId: user.id,
      });

      const startDate = new Date(d.period.start * 1000);
      const endDate = new Date(d.period.end * 1000);

      // TODO: provision subscription
    }
  }
}

async function handleInvoicePaymentFailed(event: any) {
  // TODO: handle invoice payment failed event
  console.log(event);
}
