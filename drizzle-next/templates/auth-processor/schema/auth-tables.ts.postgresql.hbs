import {
  boolean,
  timestamp,
  pgTable,
  text,
  primaryKey,
  integer,
  {{fkDataTypeImportCode}}
} from "drizzle-orm/pg-core"
import type { AdapterAccountType } from "next-auth/adapters"
import { {{userObj.pluralCamelCase}} } from "@/schema/{{userObj.pluralKebabCase}}"
 
export const {{accountObj.pluralCamelCase}} = pgTable(
  "{{accountObj.pluralSnakeCase}}",
  {
    userId: {{fkStrategyTemplate}}
      .notNull()
      .references(() => {{userObj.pluralCamelCase}}.id, { onDelete: "cascade" }),
    type: text().$type<AdapterAccountType>().notNull(),
    provider: text().notNull(),
    providerAccountId: text().notNull(),
    refresh_token: text(),
    access_token: text(),
    expires_at: integer(),
    token_type: text(),
    scope: text(),
    id_token: text(),
    session_state: text(),
  },
  (account) => ({
    compoundKey: primaryKey({
      columns: [account.provider, account.providerAccountId],
    }),
  })
)
 
export const {{sessionObj.pluralCamelCase}} = pgTable("{{sessionObj.pluralSnakeCase}}", {
  sessionToken: text().primaryKey(),
  userId: {{fkStrategyTemplate}}
    .notNull()
    .references(() => {{userObj.pluralCamelCase}}.id, { onDelete: "cascade" }),
  expires: timestamp({ mode: "date" }).notNull(),
})
 
export const {{verificationTokenObj.pluralCamelCase}} = pgTable(
  "{{verificationTokenObj.pluralSnakeCase}}",
  {
    identifier: text().notNull(),
    token: text().notNull(),
    expires: timestamp({ mode: "date" }).notNull(),
  },
  (verificationToken) => ({
    compositePk: primaryKey({
      columns: [verificationToken.identifier, verificationToken.token],
    }),
  })
)
 
export const {{authenticatorObj.pluralCamelCase}} = pgTable(
  "{{authenticatorObj.pluralSnakeCase}}",
  {
    credentialID: text().notNull().unique(),
    userId: {{fkStrategyTemplate}}
      .notNull()
      .references(() => {{userObj.pluralCamelCase}}.id, { onDelete: "cascade" }),
    providerAccountId: text().notNull(),
    credentialPublicKey: text().notNull(),
    counter: integer().notNull(),
    credentialDeviceType: text().notNull(),
    credentialBackedUp: boolean().notNull(),
    transports: text(),
  },
  (authenticator) => ({
    compositePK: primaryKey({
      columns: [authenticator.userId, authenticator.credentialID],
    }),
  })
)