import { eq, like, sql, desc } from "drizzle-orm";
import { db } from "@/lib/db";
import { {{tableObj.singularPascalCase}}, {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";

export type {{tableObj.pluralPascalCase}}WithRelations = Awaited<
  ReturnType<typeof get{{tableObj.pluralPascalCase}}WithRelations>
>;

export async function get{{tableObj.pluralPascalCase}}WithRelations({
  limit,
  offset,
  search,
  sort,
  sortOrder,
}: {
  limit: number;
  offset: number;
  search?: string;
  sort?: string;
  sortOrder?: string;
}) {
  let orderBy = desc({{tableObj.pluralCamelCase}}.createdAt);
  
  if (sort && sort in {{tableObj.pluralCamelCase}}) {
    switch (sortOrder) {
      case "asc":
        orderBy = sql`${ {{tableObj.pluralCamelCase}}[sort as keyof {{tableObj.singularPascalCase}}] } asc`;
        break;
      case "desc":
        orderBy = sql`${ {{tableObj.pluralCamelCase}}[sort as keyof {{tableObj.singularPascalCase}}] } desc`;
        break;
      default:
        break;
    }
  }

  return await db.query.{{tableObj.pluralCamelCase}}.findMany({
    limit: limit,
    offset: offset,
    where: search ? like({{tableObj.pluralCamelCase}}.id, `%${search}%`) : undefined,
    orderBy: orderBy,
    with: undefined
  });
}

export type {{tableObj.singularPascalCase}}WithRelations = Awaited<
  ReturnType<typeof get{{tableObj.singularPascalCase}}WithRelations>
>;

export async function get{{tableObj.singularPascalCase}}WithRelations(id: {{pkStrategyJsType}}) {
  return await db.query.{{tableObj.pluralCamelCase}}.findFirst({
    where: eq({{tableObj.pluralCamelCase}}.id, id),
    with: undefined,
  });
}
