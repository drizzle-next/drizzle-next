"use server";

import { db } from "@/lib/db";
import { {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";
import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { createSelectSchema } from "drizzle-zod";
{{#if importFileUtils}}
import { getUploadPath, uploadFile } from "@/lib/file-utils";
{{/if}}
{{#if isNotPublic}}
import { auth } from "@/lib/auth";
{{/if}}
{{#if isAdmin}}
import { hasAdminRole } from "@/lib/authorization";
{{/if}}

const update{{tableObj.singularPascalCase}}Schema = createSelectSchema({{tableObj.pluralCamelCase}}).partial();

export interface Update{{tableObj.singularPascalCase}}State {
  errors?: {
    {{#each columns}}
    {{this}}?: string[];
    {{/each}}
  };
  message?: string;
}

export async function update{{tableObj.singularPascalCase}}(
  prevState: Update{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Update{{tableObj.singularPascalCase}}State> {
{{#if isNotPublic}}
  const session = await auth();

  if (!session?.user?.id) {
    throw new Error("access denied");
  }
{{/if}}

{{#if isAdmin}}
  const isAdmin = await hasAdminRole(session.user.id);

  if (!isAdmin) {
    throw new Error("unauthorized");
  }
{{/if}}

{{#each uploadColumnNames}}
  const {{this.singularCamelCase}}File = formData.get("{{this.originalCamelCase}}") as File;

  let {{this.singularCamelCase}}UploadPath;

  if ({{this.singularCamelCase}}File.size) {
    {{this.singularCamelCase}}UploadPath = getUploadPath({
      file: {{this.singularCamelCase}}File,
      dir: "/uploads/{{../tableObj.pluralKebabCase}}/",
    });
    uploadFile({ file: {{this.singularCamelCase}}File, uploadPath: {{this.singularCamelCase}}UploadPath });
  }
{{/each}}

  const validatedFields = update{{tableObj.singularPascalCase}}Schema.safeParse({
{{formDataKeyVal}}
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "bad request",
    };
  }

  if (!validatedFields.data.id) {
    return {
      message: "id required"
    }
  }

  await db
    .update({{tableObj.pluralCamelCase}})
    .set(validatedFields.data)
    .where(eq({{tableObj.pluralCamelCase}}.id, validatedFields.data.id));

  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}");
  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id);
  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id + "/edit");

  return {
    message: "success",
  };
}
