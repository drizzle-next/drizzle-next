"use server";

import { db } from "@/lib/db";
import { id{{tableObj.singularPascalCase}}Schema, {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";
import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
{{#if isNotPublic}}
import { auth } from "@/lib/auth";
{{/if}}
{{#if isAdmin}}
import { hasAdminRole } from "@/lib/authorization";
{{/if}}

export interface Delete{{tableObj.singularPascalCase}}State {
  errors?: {
    id?: string[];
  };
  message?: string;
}

export async function delete{{tableObj.singularPascalCase}}(
  prevState: Delete{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Delete{{tableObj.singularPascalCase}}State> {
{{#if isNotPublic}}
  const session = await auth();

  if (!session?.user?.id) {
    throw new Error("access denied");
  }
{{/if}}

{{#if isAdmin}}
  const isAdmin = await hasAdminRole(session.user.id);

  if (!isAdmin) {
    throw new Error("unauthorized");
  }
{{/if}}

  const validatedFields = id{{tableObj.singularPascalCase}}Schema.safeParse({
    id: (formData.get("id") as string) || null,
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "error",
    };
  }

  await db.delete({{tableObj.pluralCamelCase}}).where(eq({{tableObj.pluralCamelCase}}.id, validatedFields.data.id));

  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}");
  redirect("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}");
}
