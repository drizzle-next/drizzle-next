    Credentials({
      credentials: {
        email: {},
        password: { type: "password" },
      },
      authorize: async (credentials) => {
        const email = credentials.email as string;
        const password = credentials.password as string;
        const userRecord = await db.query.users.findFirst({
          where: eq(users.email, email),
        });
        if (!userRecord) {
          throw new Error("User not found.");
        }
        if (!userRecord.password) {
          throw new Error("Password not found.");
        }
        const valid = bcrypt.compareSync(password, userRecord.password);
        if (!valid) {
          throw new Error("Invalid password.");
        }
        if ((SESSION_STRATEGY as SessionStrategy) === "database") {
          const sessionToken = crypto.randomUUID();
          const sessionExpiry = fromDate(3600);
          await adapter.createSession!({
            sessionToken: sessionToken,
            expires: sessionExpiry,
            userId: userRecord.id,
          });
          const cookieStore = cookies();
          cookieStore.set("next-auth.session-token", sessionToken, {
            expires: sessionExpiry,
          });
        }
        return userRecord;
      },
    }),