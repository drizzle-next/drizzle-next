"use client";

import { usePathname, useRouter, useSearchParams } from "next/navigation";
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronsLeftIcon,
  ChevronsRightIcon,
} from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "./ui/button";
import { useState } from "react";

export function Pagination({
  page,
  totalPages,
  pageSize,
  count,
}: {
  page: number;
  totalPages: number;
  pageSize: number;
  count: number;
}) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const pathname = usePathname();
  const [value, setValue] = useState<string>(page.toString());

  function first() {
    const params = new URLSearchParams(searchParams);
    params.set("page", "1");
    router.push(`${pathname}?${params.toString()}`);
  }

  function previous() {
    const params = new URLSearchParams(searchParams);
    params.set("page", (page - 1).toString());
    router.push(`${pathname}?${params.toString()}`);
  }

  function next() {
    const params = new URLSearchParams(searchParams);
    params.set("page", (page + 1).toString());
    router.push(`${pathname}?${params.toString()}`);
  }

  function last() {
    const params = new URLSearchParams(searchParams);
    params.set("page", totalPages.toString());
    router.push(`${pathname}?${params.toString()}`);
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === "Enter") {
      const params = new URLSearchParams(searchParams);

      const num = parseInt(value);
      if (Number.isInteger(num)) {
        params.set("page", num.toString());
        router.push(`${pathname}?${params.toString()}`);
      } else {
        params.set("page", "1");
        router.push(`${pathname}?${params.toString()}`);
        setValue("1");
      }
    }
  }

  function changePageSize(str: string) {
    const params = new URLSearchParams(searchParams);
    params.set("pageSize", str);
    router.push(`${pathname}?${params.toString()}`);
  }

  return (
    <div className="flex items-center gap-1 p-1 bg-primary-foreground">
      <div className="text-nowrap">{count} items</div>
      <div>
        <Button
          variant="secondary"
          size="icon"
          onClick={first}
          disabled={page <= 1}
        >
          <ChevronsLeftIcon className="h-4 w-4" />
        </Button>
      </div>
      <div>
        <Button
          variant="secondary"
          size="icon"
          onClick={previous}
          disabled={page <= 1}
        >
          <ChevronLeftIcon className="h-4 w-4" />
        </Button>
      </div>
      <div className="text-nowrap">
        <Input
          name="page"
          className="w-12"
          value={value}
          onChange={(e) => setValue(e.target.value)}
          onKeyDown={handleKeyDown}
        />
      </div>
      <div className="text-nowrap">of {totalPages}</div>
      <div>
        <Button
          variant="secondary"
          size="icon"
          onClick={next}
          disabled={page >= totalPages}
        >
          <ChevronRightIcon className="h-4 w-4" />
        </Button>
      </div>
      <div>
        <Button
          variant="secondary"
          size="icon"
          onClick={last}
          disabled={page >= totalPages}
        >
          <ChevronsRightIcon className="h-4 w-4" />
        </Button>
      </div>
      <div className="flex items-center gap-1">
        <Select
          onValueChange={changePageSize}
          defaultValue={pageSize.toString()}
        >
          <SelectTrigger>
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="10">10</SelectItem>
            <SelectItem value="20">20</SelectItem>
            <SelectItem value="50">50</SelectItem>
            <SelectItem value="100">100</SelectItem>
            <SelectItem value="200">200</SelectItem>
            <SelectItem value="500">500</SelectItem>
          </SelectContent>
        </Select>
        <div className="text-nowrap">per page</div>
      </div>
    </div>
  );
}
