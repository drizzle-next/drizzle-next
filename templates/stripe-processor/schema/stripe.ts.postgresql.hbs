import {
  timestamp,
  pgTable,
  text,
  primaryKey,
  integer,
  boolean,
  uuid,
  json,
  pgEnum,
  date,
  unique,
  doublePrecision,
  bigserial,
  bigint,
} from "drizzle-orm/pg-core";
import { users } from "./users";
{{pkStrategyImport}}

export const stripeWebhooks = pgTable("stripe_webhooks", {
  {{pkText}}
  payload: json("payload"),
  created_at: timestamp("created_at").notNull().defaultNow(),
});

export const products = pgTable("products", {
  {{pkText}}
  slug: text("slug").notNull().unique(),
  stripe_product_id: text("stripe_product_id").notNull().unique(),
  stripe_price_id: text("stripe_price_id"),
  name: text("name").notNull(),
  price: integer("price").notNull(),
  description: text("description"),
  mode: text("mode").notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
  updated_at: timestamp("updated_at").notNull().defaultNow(),
});

export const orders = pgTable("orders", {
  {{pkText}}
  user_id: text("user_id").notNull().references(() => users.id),
  product_id: text("product_id").notNull().references(() => products.id),
  stripe_product_id: text("stripe_product_id").notNull(),
  stripe_price_id: text("stripe_price_id").notNull(),
  amount_total: integer("amount_total").notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
});

export const subscriptions = pgTable("subscriptions", {
  {{pkText}}
  user_id: text("user_id").notNull().references(() => users.id),
  product_id: text("product_id").notNull().references(() => products.id),
  start_date: date("start_date", { mode: "date" }).notNull(),
  end_date: date("end_date", { mode: "date" }).notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
  updated_at: timestamp("updated_at").notNull().defaultNow(),
});