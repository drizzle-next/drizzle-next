import { Button } from "@/components/ui/button";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbList,
  BreadcrumbPage,
} from "@/components/ui/breadcrumb";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { auth } from "@/lib/auth";
import { db } from "@/lib/db";
import { payments } from "@/schema/payments";
import { products } from "@/schema/products";
import { users } from "@/schema/users";
import { desc, eq } from "drizzle-orm";
import { Metadata } from "next";
import { redirect } from "next/navigation";

export const metadata: Metadata = {
  title: "Account",
};

export default async function Page() {
  const session = await auth();

  if (!session?.user?.id) {
    redirect("/signin");
  }

  const user = await db.query.users.findFirst({
    where: eq(users.id, session.user.id),
  });

  if (!user) {
    redirect("/signin");
  }

  const paymentList = await db
    .select()
    .from(payments)
    .leftJoin(products, eq(payments.productId, products.id))
    .innerJoin(users, eq(users.id, payments.userId))
    .where(eq(users.id, session.user.id))
    .orderBy(desc(payments.createdAt));

  return (
    <div className="relative">
      <div className="absolute left-8 -top-6">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbPage>Account</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>
      {user.stripeCustomerId && (
        <div className="pt-5">
          <Card>
            <CardHeader>
              <CardTitle>Billing &amp; Payment</CardTitle>
            </CardHeader>
            <CardContent>
              <form action="/api/customer_portal" method="POST">
                <Button type="submit">Edit Billing / View Invoices</Button>
              </form>
            </CardContent>
          </Card>
        </div>
      )}
      <div className="pt-5">
        <Card>
          <CardHeader>
            <CardTitle>Billing History</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Product</TableHead>
                  <TableHead>Amount Total</TableHead>
                  <TableHead>Date</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {paymentList.map((d) => (
                  <TableRow key={d.payments.id}>
                    <TableCell>{d.products?.name}</TableCell>
                    <TableCell>
                      {d.payments.amountTotal &&
                        (d.payments.amountTotal / 100).toLocaleString("en-US", {
                          style: "currency",
                          currency: "USD",
                        })}
                    </TableCell>
                    <TableCell>
                      {d.payments.createdAt.toLocaleString()}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
